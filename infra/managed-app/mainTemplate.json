{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "10260802261849329885"
    }
  },
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the resource group that GraphRAG will be deployed in."
      }
    },
    "resourceBaseName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Unique name to append to each resource"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Cloud region for all resources"
      }
    },
    "apiPublisherName": {
      "type": "string",
      "defaultValue": "Microsoft",
      "minLength": 1,
      "metadata": {
        "description": "Name of the publisher of the API Management service."
      }
    },
    "apiPublisherEmail": {
      "type": "string",
      "defaultValue": "publisher@microsoft.com",
      "minLength": 1,
      "metadata": {
        "description": "Email address of the publisher of the API Management service."
      }
    },
    "restoreAPIM": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether or not to restore the API Management service from a soft-deleted state."
      }
    },
    "apimTier": {
      "type": "string",
      "defaultValue": "Developer"
    },
    "apimName": {
      "type": "string",
      "defaultValue": ""
    },
    "deployAcr": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether or not to deploy a new ACR resource instead of connecting to an existing service."
      }
    },
    "existingAcrLoginServer": {
      "type": "string",
      "defaultValue": ""
    },
    "acrTokenName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The ACR token username. This is only used if an existing ACR is used."
      }
    },
    "acrTokenPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The ACR token password. This is only used if an existing ACR is used."
      }
    },
    "graphragImageName": {
      "type": "string",
      "defaultValue": "graphrag"
    },
    "graphragImageVersion": {
      "type": "string",
      "defaultValue": "latest"
    },
    "deployAoai": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether or not to deploy a new AOAI resource instead of connecting to an existing service."
      }
    },
    "existingAoaiId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource id of an existing AOAI resource."
      }
    },
    "llmModelName": {
      "type": "string",
      "defaultValue": "gpt-4o",
      "allowedValues": [
        "gpt-4",
        "gpt-4o",
        "gpt-4o-mini"
      ],
      "metadata": {
        "description": "Name of the AOAI LLM model to use. Must match official model id. For more information: https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models"
      }
    },
    "llmModelDeploymentName": {
      "type": "string",
      "defaultValue": "gpt-4o",
      "metadata": {
        "description": "Deployment name of the AOAI LLM model to use. For more information: https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models"
      }
    },
    "llmModelVersion": {
      "type": "string",
      "defaultValue": "2024-08-06",
      "allowedValues": [
        "2024-08-06",
        "turbo-2024-04-09"
      ],
      "metadata": {
        "description": "Model version of the AOAI LLM model to use."
      }
    },
    "llmModelQuota": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Quota of the AOAI LLM model to use."
      }
    },
    "embeddingModelName": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "allowedValues": [
        "text-embedding-ada-002",
        "text-embedding-3-large"
      ],
      "metadata": {
        "description": "Name of the AOAI embedding model to use. Must match official model id. For more information: https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models"
      }
    },
    "embeddingModelDeploymentName": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002",
      "metadata": {
        "description": "Deployment name of the AOAI embedding model to use. Must match official model id. For more information: https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models"
      }
    },
    "embeddingModelVersion": {
      "type": "string",
      "defaultValue": "2",
      "allowedValues": [
        "2",
        "1"
      ],
      "metadata": {
        "description": "Model version of the AOAI embedding model to use."
      }
    },
    "embeddingModelQuota": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Quota of the AOAI embedding model to use."
      }
    },
    "aksNamespace": {
      "type": "string",
      "defaultValue": "graphrag",
      "metadata": {
        "description": "The AKS namespace to install GraphRAG in."
      }
    },
    "utcString": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    },
    "managedAppStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "This parameter will only get defined during a managed app deployment."
      }
    },
    "managedAppStorageAccountKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "This parameter will only get defined during a managed app deployment."
      }
    },
    "enablePrivateEndpoints": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to use private endpoint connections or not."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appContainerApps": "ca-",
      "appManagedEnvironments": "cae-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "azureOpenAI": "aoai-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachineScaleSets": "vmss-",
      "computeVirtualMachines": "vm",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "databricksWorkspaces": "dbw-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkScope": "pls-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "privateEndpoint": "pep-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storSimpleManagers": "ssimp",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "$fxv#1": "#!/bin/bash\n\n# Install kubectl\nset -e\naz aks install-cli --only-show-errors\naz login --identity\n\n# Get AKS credentials\n# requires \"Azure Kubernetes Service Cluster Admin\" role and \"Azure Kubernetes Service RBAC Cluster Admin\" role\naz aks get-credentials \\\n  --admin \\\n  --name $AKS_NAME  \\\n  --resource-group $RESOURCE_GROUP --only-show-errors\n\n# Define a namespace to install graphrag in\naksNamespace=\"graphrag\"\n\n# Setup an image pull secret for AKS to access ACR\n# NOTE: use an image pull secret instead of managed identity RBAC roles to seamlessly enable ACR access from any subscription/tenant\naksSecretName=\"regcred\"\nkubectl create namespace $aksNamespace\nkubectl create secret docker-registry $aksSecretName \\\n  --docker-server=$ACR_SERVER \\\n  --docker-username=$ACR_TOKEN_NAME \\\n  --docker-password=$ACR_TOKEN_PASSWORD \\\n  --namespace $aksNamespace\n\n# Install helm\ncurl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 -o get_helm.sh -s\nchmod 700 get_helm.sh\n./get_helm.sh &>/dev/null\n\n# Login to ACR and retrieve helm chart\n# A token for the ACR should be generated ahead of time\nhelm registry login $ACR_SERVER --username $ACR_TOKEN_NAME --password $ACR_TOKEN_PASSWORD\nhelm pull \"oci://$ACR_SERVER/helm/graphrag\" --untar\n\n# Install the helm chart\nhelm upgrade -i graphrag ./graphrag -f ./graphrag/values.yaml \\\n    --namespace $aksNamespace --create-namespace \\\n    --set \"serviceAccount.name=$AKS_SERVICE_ACCOUNT_NAME\" \\\n    --set \"serviceAccount.annotations.azure\\.workload\\.identity/client-id=$WORKLOAD_IDENTITY_CLIENT_ID\" \\\n    --set \"master.imagePullSecrets[0].name=$aksSecretName\" \\\n    --set \"master.image.repository=$ACR_SERVER/$IMAGE_NAME\" \\\n    --set \"master.image.tag=$IMAGE_VERSION\" \\\n    --set \"ingress.host=$APP_HOSTNAME\" \\\n    --set \"graphragConfig.AI_SEARCH_URL=https://$AI_SEARCH_NAME.$AI_SEARCH_ENDPOINT_SUFFIX\" \\\n    --set \"graphragConfig.AI_SEARCH_AUDIENCE=$AI_SEARCH_AUDIENCE\" \\\n    --set \"graphragConfig.APPLICATIONINSIGHTS_CONNECTION_STRING=$APP_INSIGHTS_CONNECTION_STRING\" \\\n    --set \"graphragConfig.COGNITIVE_SERVICES_AUDIENCE=$COGNITIVE_SERVICES_AUDIENCE\" \\\n    --set \"graphragConfig.COSMOS_URI_ENDPOINT=$COSMOSDB_ENDPOINT\" \\\n    --set \"graphragConfig.GRAPHRAG_API_BASE=$AOAI_ENDPOINT\" \\\n    --set \"graphragConfig.GRAPHRAG_API_VERSION=$AOAI_LLM_MODEL_API_VERSION\" \\\n    --set \"graphragConfig.GRAPHRAG_LLM_MODEL=$AOAI_LLM_MODEL\"\\\n    --set \"graphragConfig.GRAPHRAG_LLM_DEPLOYMENT_NAME=$AOAI_LLM_MODEL_DEPLOYMENT_NAME\" \\\n    --set \"graphragConfig.GRAPHRAG_EMBEDDING_MODEL=$AOAI_EMBEDDING_MODEL\" \\\n    --set \"graphragConfig.GRAPHRAG_EMBEDDING_DEPLOYMENT_NAME=$AOAI_EMBEDDING_MODEL_DEPLOYMENT_NAME\" \\\n    --set \"graphragConfig.STORAGE_ACCOUNT_BLOB_URL=$STORAGE_ACCOUNT_BLOB_URL\"\n",
    "resourceBaseNameFinal": "[if(not(empty(parameters('resourceBaseName'))), parameters('resourceBaseName'), toLower(uniqueString(resourceGroup().id)))]",
    "workloadIdentityName": "[format('{0}{1}', variables('abbrs').managedIdentityUserAssignedIdentities, variables('resourceBaseNameFinal'))]",
    "aksServiceAccountName": "[format('{0}-workload-sa', parameters('aksNamespace'))]",
    "workloadIdentitySubject": "[format('system:serviceaccount:{0}:{1}', parameters('aksNamespace'), variables('aksServiceAccountName'))]",
    "dnsDomain": "graphrag.io",
    "appHostname": "[format('graphrag.{0}', variables('dnsDomain'))]",
    "appUrl": "[format('http://{0}', variables('appHostname'))]",
    "abbrs": "[variables('$fxv#0')]",
    "tags": {
      "azd-env-name": "[parameters('resourceGroupName')]"
    },
    "roles": {
      "acrPull": "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
      "networkContributor": "[resourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
      "privateDnsZoneContributor": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aks-workload-identity-rbac-assignments",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'workload-identity-deployment'), '2022-09-01').outputs.principalId.value]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          },
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aisearch-deployment'), '2022-09-01').outputs.name.value]"
          },
          "appInsightsName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-insights-deployment'), '2022-09-01').outputs.name.value]"
          },
          "cosmosDbName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment'), '2022-09-01').outputs.name.value]"
          },
          "storageName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment'), '2022-09-01').outputs.name.value]"
          },
          "aoaiId": "[if(parameters('deployAoai'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.id.value), createObject('value', parameters('existingAoaiId')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "13531661729815253224"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "ID of the service principal to assign the RBAC roles to."
              }
            },
            "principalType": {
              "type": "string",
              "allowedValues": [
                "ServicePrincipal",
                "User",
                "Group",
                "Device",
                "ForeignGroup"
              ],
              "metadata": {
                "description": "Type of principal to assign the RBAC roles to."
              }
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Name of an existing AI Search resource."
              }
            },
            "appInsightsName": {
              "type": "string",
              "metadata": {
                "description": "Name of an existing AppInsights resource."
              }
            },
            "cosmosDbName": {
              "type": "string",
              "metadata": {
                "description": "Name of an existing CosmosDB resource."
              }
            },
            "storageName": {
              "type": "string",
              "metadata": {
                "description": "Name of an existing Azure Storage resource."
              }
            },
            "aoaiId": {
              "type": "string",
              "metadata": {
                "description": "ID of an existing AOAI resource."
              }
            }
          },
          "variables": {
            "roleIds": {
              "contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
              "aiSearchIndexDataContributor": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
              "aiSearchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
              "cognitiveServicesOpenAIContributor": "a001fd3d-188f-4b5d-821b-7da978bf7442",
              "cognitiveServicesUsagesReader": "bba48692-92b0-4667-a9ad-c31c7b334ac2",
              "cosmosDBOperator": "230815da-be43-4aae-9cb4-875f7bd000aa",
              "cosmosDbBuiltInDataContributor": "00000000-0000-0000-0000-000000000002",
              "documentDBAccountContributor": "5bd9cd88-fe45-4216-938b-f97437e15450",
              "monitoringMetricsPublisher": "3913510d-42f4-4e42-8a64-420c390055eb",
              "storageBlobDataContributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
              "sqlDBContributor": "9b7fa17d-e63e-47b0-bb0a-15c516ac86ec"
            },
            "splitId": "[split(parameters('aoaiId'), '/')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('principalId'), parameters('principalType'), variables('roleIds').contributor)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleIds').contributor)]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('principalId'), parameters('principalType'), variables('roleIds').aiSearchIndexDataContributor)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleIds').aiSearchIndexDataContributor)]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('principalId'), parameters('principalType'), variables('roleIds').aiSearchIndexDataReader)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleIds').aiSearchIndexDataReader)]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosDbName'))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName')), parameters('principalId'), parameters('principalType'), variables('roleIds').cosmosDBOperator)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleIds').cosmosDBOperator)]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosDbName'))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName')), parameters('principalId'), parameters('principalType'), variables('roleIds').documentDBAccountContributor)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleIds').documentDBAccountContributor)]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosDbName'))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName')), parameters('principalId'), parameters('principalType'), variables('roleIds').sqlDBContributor)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleIds').sqlDBContributor)]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageName')), parameters('principalId'), parameters('principalType'), variables('roleIds').storageBlobDataContributor)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleIds').storageBlobDataContributor)]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), parameters('principalId'), variables('roleIds').monitoringMetricsPublisher)]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleIds').monitoringMetricsPublisher)]"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName')), parameters('principalId'), parameters('principalType'), variables('roleIds').cosmosDbBuiltInDataContributor))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[format('{0}/sqlRoleDefinitions/{1}', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName')), variables('roleIds').cosmosDbBuiltInDataContributor)]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName'))]"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aoai-rbac-assignments",
              "subscriptionId": "[variables('splitId')[2]]",
              "resourceGroup": "[variables('splitId')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('splitId')[8]]"
                  },
                  "roleAssignments": {
                    "value": [
                      {
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]",
                        "roleDefinitionId": "[variables('roleIds').cognitiveServicesOpenAIContributor]"
                      },
                      {
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]",
                        "roleDefinitionId": "[variables('roleIds').cognitiveServicesUsagesReader]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "11752979240038278211"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Array of objects with fields principalId, principalType, roleDefinitionId"
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), parameters('roleAssignments')[copyIndex()].principalId, parameters('roleAssignments')[copyIndex()].principalType, parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
                      "properties": {
                        "principalId": "[parameters('roleAssignments')[copyIndex()].principalId]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
                        "principalType": "[parameters('roleAssignments')[copyIndex()].principalType]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                    },
                    "endpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "aoaiName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('splitId')[2], variables('splitId')[4]), 'Microsoft.Resources/deployments', 'aoai-rbac-assignments'), '2022-09-01').outputs.name.value]"
            },
            "aoaiId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('splitId')[2], variables('splitId')[4]), 'Microsoft.Resources/deployments', 'aoai-rbac-assignments'), '2022-09-01').outputs.id.value]"
            },
            "aoaiEndpoint": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('splitId')[2], variables('splitId')[4]), 'Microsoft.Resources/deployments', 'aoai-rbac-assignments'), '2022-09-01').outputs.endpoint.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'aisearch-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'aoai-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'app-insights-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'workload-identity-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aks-rbac-assignments",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "roleAssignments": {
            "value": [
              {
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-deployment'), '2022-09-01').outputs.kubeletPrincipalId.value]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('roles').acrPull]"
              },
              {
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-deployment'), '2022-09-01').outputs.ingressWebAppIdentity.value]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('roles').privateDnsZoneContributor]"
              },
              {
                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-deployment'), '2022-09-01').outputs.systemIdentity.value]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('roles').networkContributor]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "13501588947783727553"
            }
          },
          "parameters": {
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of objects with fields principalId, principalType, roleDefinitionId"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().subscriptionId, resourceGroup().name, parameters('roleAssignments')[copyIndex()].principalId, parameters('roleAssignments')[copyIndex()].principalType, parameters('roleAssignments')[copyIndex()].roleDefinitionId)]",
              "properties": "[parameters('roleAssignments')[copyIndex()]]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'aks-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "log-analytics-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').operationalInsightsWorkspaces, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publicNetworkAccessForIngestion": "[if(parameters('enablePrivateEndpoints'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8055830016525407083"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Log Analytics resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the Log Analytics resource."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Disabled",
              "metadata": {
                "description": "The public network access for ingestion."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "properties": {
                "retentionInDays": 30,
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "Enabled",
                "features": {
                  "immediatePurgeDataOn30Days": true
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "nsg-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "nsgName": {
            "value": "[format('{0}{1}', variables('abbrs').networkNetworkSecurityGroups, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "13485881125105531793"
            }
          },
          "parameters": {
            "nsgName": {
              "type": "string",
              "defaultValue": "[format('apim-nsg-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Name of the NSG for the API Management service."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region where the resources will be deployed"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2024-05-01",
              "name": "[parameters('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "Client_communication_to_API_Management",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "80",
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Secure_Client_communication_to_API_Management",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "Internet",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 110,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Management_endpoint_for_Azure_portal_and_Powershell",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3443",
                      "sourceAddressPrefix": "ApiManagement",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Dependency_on_Redis_Cache",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "6381-6383",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 130,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Dependency_to_sync_Rate_Limit_Inbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "4290",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 135,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Dependency_on_Azure_SQL",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "1433",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Sql",
                      "access": "Allow",
                      "priority": 140,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Dependency_for_Log_to_event_Hub_policy",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "5671",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "EventHub",
                      "access": "Allow",
                      "priority": 150,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Dependency_on_Redis_Cache_outbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "6381-6383",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 160,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Depenedency_To_sync_RateLimit_Outbound",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "4290",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 165,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Dependency_on_Azure_File_Share_for_GIT",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "445",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 170,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Azure_Infrastructure_Load_Balancer",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "6390",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 180,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "Publish_DiagnosticLogs_And_Metrics",
                    "properties": {
                      "description": "API Management logs and metrics for consumption by admins and your IT team are all part of the management plane",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "AzureMonitor",
                      "access": "Allow",
                      "priority": 185,
                      "direction": "Outbound",
                      "destinationPortRanges": [
                        "443",
                        "12000",
                        "1886"
                      ]
                    }
                  },
                  {
                    "name": "Connect_To_SMTP_Relay_For_SendingEmails",
                    "properties": {
                      "description": "APIM features the ability to generate email traffic as part of the data plane and the management plane",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Internet",
                      "access": "Allow",
                      "priority": 190,
                      "direction": "Outbound",
                      "destinationPortRanges": [
                        "25",
                        "587",
                        "25028"
                      ]
                    }
                  },
                  {
                    "name": "Authenticate_To_Azure_Active_Directory",
                    "properties": {
                      "description": "Connect to Azure Active Directory for developer Portal authentication or for OAuth 2 flow during any proxy authentication",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "AzureActiveDirectory",
                      "access": "Allow",
                      "priority": 200,
                      "direction": "Outbound",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ]
                    }
                  },
                  {
                    "name": "Dependency_on_Azure_Storage",
                    "properties": {
                      "description": "API Management service dependency on Azure blob and Azure table storage",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Publish_Monitoring_Logs",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "AzureCloud",
                      "access": "Allow",
                      "priority": 300,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "Deny_All_Internet_Outbound",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Internet",
                      "access": "Deny",
                      "priority": 999,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vnet-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[format('{0}{1}', variables('abbrs').networkVirtualNetworks, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetPrefix": {
            "value": "[variables('abbrs').networkVirtualNetworksSubnets]"
          },
          "apimTier": {
            "value": "[parameters('apimTier')]"
          },
          "nsgID": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'nsg-deployment'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "1707965760165332297"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Name of the vnet resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region where the resource will be deployed."
              }
            },
            "subnetPrefix": {
              "type": "string",
              "defaultValue": "snet-",
              "metadata": {
                "description": "Optional prefix to prepend to subnet names."
              }
            },
            "apimTier": {
              "type": "string",
              "allowedValues": [
                "Developer",
                "StandardV2"
              ],
              "metadata": {
                "description": "APIM tier - used to determine if subnet delegations are required."
              }
            },
            "nsgID": {
              "type": "string",
              "metadata": {
                "description": "NSG resource ID."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.1.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "[format('{0}apim', parameters('subnetPrefix'))]",
                    "properties": {
                      "addressPrefix": "10.1.0.0/24",
                      "networkSecurityGroup": {
                        "id": "[parameters('nsgID')]"
                      },
                      "delegations": "[if(equals(parameters('apimTier'), 'Developer'), createArray(), createArray(createObject('name', 'Microsoft.Web/serverFarms', 'properties', createObject('serviceName', 'Microsoft.Web/serverFarms'))))]"
                    }
                  },
                  {
                    "name": "[format('{0}aks', parameters('subnetPrefix'))]",
                    "properties": {
                      "addressPrefix": "10.1.1.0/24",
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.Storage"
                        },
                        {
                          "service": "Microsoft.Sql"
                        },
                        {
                          "service": "Microsoft.EventHub"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('vnetName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "apimSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2024-05-01').subnets[0].id]"
            },
            "aksSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2024-05-01').subnets[1].id]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'nsg-deployment')]"
      ]
    },
    {
      "condition": "[parameters('deployAoai')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aoai-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "openAiName": {
            "value": "[format('{0}{1}', variables('abbrs').cognitiveServicesAccounts, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "llmModelName": {
            "value": "[parameters('llmModelName')]"
          },
          "llmModelDeploymentName": {
            "value": "[parameters('llmModelDeploymentName')]"
          },
          "llmModelVersion": {
            "value": "[parameters('llmModelVersion')]"
          },
          "llmTpmQuota": {
            "value": "[parameters('llmModelQuota')]"
          },
          "embeddingModelName": {
            "value": "[parameters('embeddingModelName')]"
          },
          "embeddingModelDeploymentName": {
            "value": "[parameters('embeddingModelDeploymentName')]"
          },
          "embeddingModelVersion": {
            "value": "[parameters('embeddingModelVersion')]"
          },
          "embeddingTpmQuota": {
            "value": "[parameters('embeddingModelQuota')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "18017396129568676423"
            }
          },
          "parameters": {
            "openAiName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure OpenAI instance"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Azure OpenAI instance"
              }
            },
            "llmModelName": {
              "type": "string",
              "defaultValue": "gpt-4o",
              "metadata": {
                "description": "LLM model name"
              }
            },
            "llmModelDeploymentName": {
              "type": "string",
              "defaultValue": "gpt-4o",
              "metadata": {
                "description": "LLM model deployment name"
              }
            },
            "llmModelVersion": {
              "type": "string",
              "metadata": {
                "description": "LLM Model API version"
              }
            },
            "embeddingModelName": {
              "type": "string",
              "defaultValue": "text-embedding-ada-002",
              "metadata": {
                "description": "Embedding model name"
              }
            },
            "embeddingModelDeploymentName": {
              "type": "string",
              "defaultValue": "text-embedding-ada-002",
              "metadata": {
                "description": "Embedding model deployment name"
              }
            },
            "embeddingModelVersion": {
              "type": "string",
              "metadata": {
                "description": "Embedding Model API version"
              }
            },
            "llmTpmQuota": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "TPM quota for the LLM model (x1000)"
              }
            },
            "embeddingTpmQuota": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "TPM quota for the embedding model (x1000)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('openAiName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "OpenAI",
              "properties": {
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": true
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('openAiName'), parameters('llmModelDeploymentName'))]",
              "sku": {
                "name": "GlobalStandard",
                "capacity": "[parameters('llmTpmQuota')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('llmModelName')]",
                  "version": "[parameters('llmModelVersion')]"
                },
                "currentCapacity": "[parameters('llmTpmQuota')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('openAiName'), parameters('embeddingModelDeploymentName'))]",
              "sku": {
                "name": "Standard",
                "capacity": "[parameters('embeddingTpmQuota')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('embeddingModelName')]",
                  "version": "[parameters('embeddingModelVersion')]"
                },
                "currentCapacity": "[parameters('embeddingTpmQuota')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('openAiName'), parameters('llmModelDeploymentName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('openAiName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiName'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAiName')), '2024-10-01').endpoint]"
            },
            "llmModel": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('openAiName'), parameters('llmModelDeploymentName')), '2024-10-01').model.name]"
            },
            "llmModelDeploymentName": {
              "type": "string",
              "value": "[parameters('llmModelDeploymentName')]"
            },
            "llmModelQuota": {
              "type": "int",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('openAiName'), parameters('llmModelDeploymentName')), '2024-10-01', 'full').sku.capacity]"
            },
            "llmModelVersion": {
              "type": "string",
              "value": "2024-10-01"
            },
            "embeddingModel": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('openAiName'), parameters('embeddingModelDeploymentName')), '2024-10-01').model.name]"
            },
            "embeddingModelDeploymentName": {
              "type": "string",
              "value": "[parameters('embeddingModelDeploymentName')]"
            },
            "embeddingModelQuota": {
              "type": "int",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('openAiName'), parameters('embeddingModelDeploymentName')), '2024-10-01', 'full').sku.capacity]"
            },
            "embeddingModelVersion": {
              "type": "string",
              "value": "2024-10-01"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('deployAcr')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "acr-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "registryName": {
            "value": "[format('{0}{1}', variables('abbrs').containerRegistryRegistries, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "5249825089957305670"
            }
          },
          "parameters": {
            "registryName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container Registry resource. Will be automatically generated if not provided."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the Container Registry resource."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-11-01-preview",
              "name": "[parameters('registryName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "adminUserEnabled": false,
                "encryption": {
                  "status": "disabled"
                },
                "dataEndpointEnabled": false,
                "publicNetworkAccess": "Enabled",
                "networkRuleBypassOptions": "AzureServices",
                "zoneRedundancy": "Disabled",
                "anonymousPullEnabled": false,
                "metadataSearch": "Disabled"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('registryName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
            },
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-11-01-preview').loginServer]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aks-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clusterName": {
            "value": "[format('{0}{1}', variables('abbrs').containerServiceManagedClusters, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "graphragVMSize": {
            "value": "standard_d8s_v5"
          },
          "graphragIndexingVMSize": {
            "value": "standard_e8s_v5"
          },
          "clusterAdmins": {
            "value": [
              "[deployer().objectId]"
            ]
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment'), '2022-09-01').outputs.id.value]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.aksSubnetId.value]"
          },
          "privateDnsZoneName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'private-dns-zone-deployment'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "14995460784040875856"
            }
          },
          "parameters": {
            "clusterName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Managed Cluster resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the Managed Cluster resource."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The workspace id of the Log Analytics resource."
              }
            },
            "autoUpgradeProfile": {
              "type": "object",
              "defaultValue": {
                "nodeOsUpgradeChannel": "NodeImage",
                "upgradeChannel": "stable"
              },
              "metadata": {
                "description": "The auto-upgrade profile."
              }
            },
            "dnsPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
              }
            },
            "systemOsDiskSizeGB": {
              "type": "int",
              "defaultValue": 128,
              "minValue": 0,
              "maxValue": 1023,
              "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
              }
            },
            "systemNodeCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 20,
              "metadata": {
                "description": "The number of nodes for the system node pool."
              }
            },
            "systemVMSize": {
              "type": "string",
              "defaultValue": "standard_d4s_v5",
              "metadata": {
                "description": "The size of the system Virtual Machine."
              }
            },
            "graphragNodeCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 50,
              "metadata": {
                "description": "The number of nodes for the graphrag node pool."
              }
            },
            "graphragVMSize": {
              "type": "string",
              "defaultValue": "standard_d8s_v5",
              "metadata": {
                "description": "The VM size of nodes running the GraphRAG API."
              }
            },
            "graphragIndexingVMSize": {
              "type": "string",
              "defaultValue": "standard_e8s_v5",
              "metadata": {
                "description": "The VM size of nodes running GraphRAG indexing jobs."
              }
            },
            "enableEncryptionAtHost": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable encryption at host"
              }
            },
            "subnetId": {
              "type": "string"
            },
            "privateDnsZoneName": {
              "type": "string"
            },
            "clusterAdmins": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of object ids of admins that will have admin control over the cluster"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerService/managedClusters/agentPools",
              "apiVersion": "2024-02-01",
              "name": "[format('{0}/{1}', parameters('clusterName'), 'graphrag')]",
              "properties": {
                "enableAutoScaling": true,
                "upgradeSettings": {
                  "maxSurge": "50%"
                },
                "minCount": 1,
                "maxCount": 10,
                "osDiskSizeGB": "[parameters('systemOsDiskSizeGB')]",
                "count": "[parameters('graphragNodeCount')]",
                "vmSize": "[parameters('graphragVMSize')]",
                "osType": "Linux",
                "mode": "User",
                "enableEncryptionAtHost": "[parameters('enableEncryptionAtHost')]",
                "vnetSubnetID": "[parameters('subnetId')]",
                "nodeLabels": {
                  "workload": "graphrag"
                },
                "tags": {
                  "workload": "graphrag"
                },
                "type": "VirtualMachineScaleSets"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerService/managedClusters/agentPools",
              "apiVersion": "2024-02-01",
              "name": "[format('{0}/{1}', parameters('clusterName'), 'indexing')]",
              "properties": {
                "enableAutoScaling": true,
                "upgradeSettings": {
                  "maxSurge": "50%"
                },
                "minCount": 0,
                "maxCount": 10,
                "osDiskSizeGB": "[parameters('systemOsDiskSizeGB')]",
                "count": 0,
                "vmSize": "[parameters('graphragIndexingVMSize')]",
                "osType": "Linux",
                "mode": "User",
                "enableEncryptionAtHost": "[parameters('enableEncryptionAtHost')]",
                "vnetSubnetID": "[parameters('subnetId')]",
                "nodeLabels": {
                  "workload": "graphrag-indexing"
                },
                "tags": {
                  "workload": "graphrag"
                },
                "type": "VirtualMachineScaleSets"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2024-09-02-preview",
              "name": "[parameters('clusterName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "enableRBAC": true,
                "disableLocalAccounts": false,
                "dnsPrefix": "[if(not(empty(parameters('dnsPrefix'))), parameters('dnsPrefix'), toLower(parameters('clusterName')))]",
                "aadProfile": {
                  "managed": true,
                  "enableAzureRBAC": true,
                  "adminGroupObjectIDs": "[parameters('clusterAdmins')]"
                },
                "addonProfiles": {
                  "omsagent": {
                    "enabled": true,
                    "config": {
                      "logAnalyticsWorkspaceResourceID": "[parameters('logAnalyticsWorkspaceId')]"
                    }
                  }
                },
                "agentPoolProfiles": [
                  {
                    "name": "agentpool",
                    "enableAutoScaling": true,
                    "upgradeSettings": {
                      "maxSurge": "50%"
                    },
                    "minCount": 1,
                    "maxCount": 10,
                    "osDiskSizeGB": "[parameters('systemOsDiskSizeGB')]",
                    "count": "[parameters('systemNodeCount')]",
                    "vmSize": "[parameters('systemVMSize')]",
                    "osType": "Linux",
                    "mode": "System",
                    "enableEncryptionAtHost": "[parameters('enableEncryptionAtHost')]",
                    "vnetSubnetID": "[parameters('subnetId')]",
                    "type": "VirtualMachineScaleSets"
                  }
                ],
                "autoScalerProfile": {
                  "expander": "least-waste"
                },
                "ingressProfile": {
                  "webAppRouting": {
                    "enabled": true,
                    "dnsZoneResourceIds": [
                      "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
                    ]
                  }
                },
                "networkProfile": {
                  "serviceCidr": "10.3.0.0/16",
                  "dnsServiceIP": "10.3.0.10",
                  "podCidr": "10.244.0.0/16"
                },
                "autoUpgradeProfile": "[parameters('autoUpgradeProfile')]",
                "oidcIssuerProfile": {
                  "enabled": true
                },
                "securityProfile": {
                  "workloadIdentity": {
                    "enabled": true
                  }
                }
              }
            },
            {
              "type": "Microsoft.ContainerService/managedClusters/maintenanceConfigurations",
              "apiVersion": "2024-09-02-preview",
              "name": "[format('{0}/{1}', parameters('clusterName'), 'aksManagedAutoUpgradeSchedule')]",
              "properties": {
                "maintenanceWindow": {
                  "schedule": {
                    "weekly": {
                      "intervalWeeks": 1,
                      "dayOfWeek": "Sunday"
                    }
                  },
                  "durationHours": 4,
                  "startTime": "12:00"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
              ]
            },
            {
              "type": "Microsoft.ContainerService/managedClusters/maintenanceConfigurations",
              "apiVersion": "2024-09-02-preview",
              "name": "[format('{0}/{1}', parameters('clusterName'), 'aksManagedNodeOSUpgradeSchedule')]",
              "properties": {
                "maintenanceWindow": {
                  "schedule": {
                    "weekly": {
                      "intervalWeeks": 1,
                      "dayOfWeek": "Saturday"
                    }
                  },
                  "durationHours": 4,
                  "startTime": "12:00"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('clusterName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
            },
            "managedResourceGroup": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2024-09-02-preview').nodeResourceGroup]"
            },
            "controlPlaneFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2024-09-02-preview').fqdn]"
            },
            "kubeletPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2024-09-02-preview').identityProfile.kubeletidentity.objectId]"
            },
            "ingressWebAppIdentity": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2024-09-02-preview').ingressProfile.webAppRouting.identity.objectId]"
            },
            "systemIdentity": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2024-09-02-preview', 'full').identity.principalId]"
            },
            "issuer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2024-09-02-preview').oidcIssuerProfile.issuerURL]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'private-dns-zone-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosdb-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDbName": {
            "value": "[format('{0}{1}', variables('abbrs').documentDBDatabaseAccounts, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "17906019694324971263"
            }
          },
          "parameters": {
            "cosmosDbName": {
              "type": "string",
              "metadata": {
                "description": "The name of the CosmosDB resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the CosmosDB resource."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            }
          },
          "variables": {
            "maxThroughput": 1000
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-11-15",
              "name": "[parameters('cosmosDbName')]",
              "location": "[parameters('location')]",
              "tags": {
                "defaultExperience": "Core (SQL)",
                "hidden-cosmos-mmspecial": ""
              },
              "kind": "GlobalDocumentDB",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "disableKeyBasedMetadataWriteAccess": false,
                "enableFreeTier": false,
                "enableAnalyticalStorage": false,
                "analyticalStorageConfiguration": {
                  "schemaType": "WellDefined"
                },
                "databaseAccountOfferType": "Standard",
                "defaultIdentity": "FirstPartyIdentity",
                "networkAclBypass": "None",
                "disableLocalAuth": true,
                "enablePartitionMerge": false,
                "minimalTlsVersion": "Tls12",
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session",
                  "maxIntervalInSeconds": 5,
                  "maxStalenessPrefix": 100
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "cors": [],
                "capabilities": [],
                "ipRules": [],
                "backupPolicy": {
                  "type": "Periodic",
                  "periodicModeProperties": {
                    "backupIntervalInMinutes": 240,
                    "backupRetentionIntervalInHours": 8,
                    "backupStorageRedundancy": "Geo"
                  }
                },
                "networkAclBypassResourceIds": [],
                "capacity": {
                  "totalThroughputLimit": "[variables('maxThroughput')]"
                }
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbName'), 'graphrag')]",
              "properties": {
                "options": {
                  "autoscaleSettings": {
                    "maxThroughput": "[variables('maxThroughput')]"
                  }
                },
                "resource": {
                  "id": "graphrag"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDbName'), 'graphrag', 'jobs')]",
              "properties": {
                "resource": {
                  "id": "jobs",
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "automatic": true,
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  },
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash",
                    "version": 2
                  },
                  "uniqueKeyPolicy": {
                    "uniqueKeys": []
                  },
                  "conflictResolutionPolicy": {
                    "mode": "LastWriterWins",
                    "conflictResolutionPath": "/_ts"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDbName'), 'graphrag')]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDbName'), 'graphrag', 'container-store')]",
              "properties": {
                "resource": {
                  "id": "container-store",
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "automatic": true,
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  },
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash",
                    "version": 2
                  },
                  "uniqueKeyPolicy": {
                    "uniqueKeys": []
                  },
                  "conflictResolutionPolicy": {
                    "mode": "LastWriterWins",
                    "conflictResolutionPath": "/_ts"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDbName'), 'graphrag')]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('cosmosDbName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbName')), '2024-11-15').documentEndpoint]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aisearch-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').searchSearchServices, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), createObject('value', 'disabled'), createObject('value', 'enabled'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "4729759158972494368"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the AI Search instance."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the Managed Cluster resource."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "enabled",
              "allowedValues": [
                "enabled",
                "disabled"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-06-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "standard"
              },
              "properties": {
                "disableLocalAuth": true,
                "replicaCount": 1,
                "partitionCount": 1,
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkRuleSet": {
                  "ipRules": [],
                  "bypass": "AzureServices"
                },
                "semanticSearch": "disabled"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', parameters('name'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').storageStorageAccounts, replace(variables('resourceBaseNameFinal'), '-', ''))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "tags": {
            "value": "[variables('tags')]"
          },
          "deleteRetentionPolicy": {
            "value": {
              "enabled": true,
              "days": 5
            }
          },
          "defaultToOAuthAuthentication": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "842218857589381685"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Storage Account resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the Storage Account resource."
              }
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Hot",
                "Cool",
                "Premium"
              ]
            },
            "dnsEndpointType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "AzureDnsZone",
                "Standard"
              ]
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "allowCrossTenantReplication": {
              "type": "bool",
              "defaultValue": true
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "defaultToOAuthAuthentication": {
              "type": "bool",
              "defaultValue": false
            },
            "deleteRetentionPolicy": {
              "type": "object",
              "defaultValue": {}
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2"
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2"
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "copy": {
                "name": "storage::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[not(empty(parameters('containers')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('name'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'publicAccess'), 'None')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('name'), 'default')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('containers')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": "[parameters('deleteRetentionPolicy')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "accessTier": "[parameters('accessTier')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
                "dnsEndpointType": "[parameters('dnsEndpointType')]",
                "isHnsEnabled": true,
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                },
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2023-01-01').primaryEndpoints]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "app-insights-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsName": {
            "value": "[format('{0}{1}', variables('abbrs').insightsComponents, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "appInsightsPublicNetworkAccessForIngestion": "[if(parameters('enablePrivateEndpoints'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "15621097425161390791"
            }
          },
          "parameters": {
            "appInsightsName": {
              "type": "string",
              "defaultValue": "appi",
              "metadata": {
                "description": "Application Insights resource name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region where the resources will be deployed"
              }
            },
            "appInsightsPublicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Disabled",
              "metadata": {
                "description": "Application Insights public network access for ingestion"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Workspace id of a Log Analytics resource."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                "publicNetworkAccessForIngestion": "[parameters('appInsightsPublicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "Enabled"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('appInsightsName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
            },
            "connectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            "instrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "apim-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apiManagementName": "[if(not(empty(parameters('apimName'))), createObject('value', parameters('apimName')), createObject('value', format('{0}{1}', variables('abbrs').apiManagementService, variables('resourceBaseNameFinal'))))]",
          "restoreAPIM": {
            "value": "[parameters('restoreAPIM')]"
          },
          "appInsightsId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-insights-deployment'), '2022-09-01').outputs.id.value]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-insights-deployment'), '2022-09-01').outputs.instrumentationKey.value]"
          },
          "publicIpName": {
            "value": "[format('{0}{1}', variables('abbrs').networkPublicIPAddresses, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "[parameters('apimTier')]"
          },
          "skuCount": {
            "value": 1
          },
          "availabilityZones": {
            "value": []
          },
          "publisherEmail": {
            "value": "[parameters('apiPublisherEmail')]"
          },
          "publisherName": {
            "value": "[parameters('apiPublisherName')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.apimSubnetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "18156808235146552774"
            }
          },
          "parameters": {
            "apiManagementName": {
              "type": "string",
              "metadata": {
                "description": "The name of the API Management service instance"
              }
            },
            "publisherEmail": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The email address of the owner of the service"
              }
            },
            "publisherName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "The name of the owner of the service"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Developer",
              "allowedValues": [
                "Developer",
                "StandardV2"
              ],
              "metadata": {
                "description": "The pricing tier of this API Management service"
              }
            },
            "skuCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "The instance size of this API Management service. This should be a multiple of the number of availability zones getting deployed."
              }
            },
            "appInsightsId": {
              "type": "string",
              "metadata": {
                "description": "Application Insights resource ID"
              }
            },
            "appInsightsInstrumentationKey": {
              "type": "string",
              "metadata": {
                "description": "Application Insights instrumentation key"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region where the resources will be deployed"
              }
            },
            "availabilityZones": {
              "type": "array",
              "defaultValue": [
                "1",
                "2"
              ],
              "metadata": {
                "description": "Numbers for availability zones, for example, 1,2,3."
              }
            },
            "publicIpName": {
              "type": "string",
              "defaultValue": "apimPublicIP",
              "metadata": {
                "description": "Name for the public IP address used to access the API Management service."
              }
            },
            "publicIpSku": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard"
              ],
              "metadata": {
                "description": "SKU for the public IP address used to access the API Management service."
              }
            },
            "publicIPAllocationMethod": {
              "type": "string",
              "defaultValue": "Static",
              "allowedValues": [
                "Static"
              ],
              "metadata": {
                "description": "Allocation method for the public IP address used to access the API Management service. Standard SKU public IP requires `Static` allocation."
              }
            },
            "dnsLabelPrefix": {
              "type": "string",
              "defaultValue": "[toLower(format('{0}-{1}', parameters('publicIpName'), uniqueString(resourceGroup().id)))]",
              "metadata": {
                "description": "Unique DNS name for the public IP address used to access the API management service."
              }
            },
            "restoreAPIM": {
              "type": "bool",
              "defaultValue": false
            },
            "subnetId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2024-01-01",
              "name": "[parameters('publicIpName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('publicIpSku')]"
              },
              "properties": {
                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                "publicIPAddressVersion": "IPv4",
                "dnsSettings": {
                  "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                }
              }
            },
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2023-09-01-preview",
              "name": "[parameters('apiManagementName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('sku')]",
                "capacity": "[parameters('skuCount')]"
              },
              "zones": "[if(equals(length(parameters('availabilityZones')), 0), null(), parameters('availabilityZones'))]",
              "properties": {
                "restore": "[parameters('restoreAPIM')]",
                "publisherEmail": "[parameters('publisherEmail')]",
                "publisherName": "[parameters('publisherName')]",
                "virtualNetworkType": "External",
                "publicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]",
                "virtualNetworkConfiguration": {
                  "subnetResourceId": "[parameters('subnetId')]"
                },
                "customProperties": {
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_GCM_SHA256": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_256_CBC_SHA256": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_256_CBC_SHA": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "false",
                  "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "false"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/loggers",
              "apiVersion": "2024-06-01-preview",
              "name": "[format('{0}/{1}', parameters('apiManagementName'), 'apimLogger')]",
              "properties": {
                "credentials": {
                  "instrumentationKey": "[parameters('appInsightsInstrumentationKey')]"
                },
                "description": "Application Insights for APIM",
                "loggerType": "applicationInsights",
                "resourceId": "[parameters('appInsightsId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/diagnostics",
              "apiVersion": "2023-09-01-preview",
              "name": "[format('{0}/{1}', parameters('apiManagementName'), 'applicationinsights')]",
              "properties": {
                "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apiManagementName'), 'apimLogger')]",
                "alwaysLog": "allErrors",
                "verbosity": "information",
                "sampling": {
                  "percentage": 100,
                  "samplingType": "fixed"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementName'))]",
                "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apiManagementName'), 'apimLogger')]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('apiManagementName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementName'))]"
            },
            "apimGatewayUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('apiManagementName')), '2023-09-01-preview').gatewayUrl]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'app-insights-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "graphrag-docs-api-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apiManagementName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'apim-deployment'), '2022-09-01').outputs.name.value]"
          },
          "backendUrl": {
            "value": "[variables('appUrl')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "1475999716089380840"
            }
          },
          "parameters": {
            "apiManagementName": {
              "type": "string"
            },
            "backendUrl": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2023-09-01-preview",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/documentation', parameters('apiManagementName')), '/')[0], split(format('{0}/documentation', parameters('apiManagementName')), '/')[1], 'docs')]",
              "properties": {
                "displayName": "docs",
                "method": "GET",
                "urlTemplate": "/docs",
                "templateParameters": [],
                "responses": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', split(format('{0}/documentation', parameters('apiManagementName')), '/')[0], split(format('{0}/documentation', parameters('apiManagementName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2023-09-01-preview",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/documentation', parameters('apiManagementName')), '/')[0], split(format('{0}/documentation', parameters('apiManagementName')), '/')[1], 'openapi')]",
              "properties": {
                "displayName": "openapi",
                "method": "GET",
                "urlTemplate": "/openapi.json",
                "templateParameters": [],
                "responses": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', split(format('{0}/documentation', parameters('apiManagementName')), '/')[0], split(format('{0}/documentation', parameters('apiManagementName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2023-09-01-preview",
              "name": "[format('{0}/documentation', parameters('apiManagementName'))]",
              "properties": {
                "displayName": "documentation",
                "apiRevision": "1",
                "subscriptionRequired": false,
                "serviceUrl": "[format('{0}/manpage', parameters('backendUrl'))]",
                "path": "manpage",
                "protocols": [
                  "https"
                ],
                "authenticationSettings": {
                  "oAuth2AuthenticationSettings": [],
                  "openidAuthenticationSettings": []
                },
                "subscriptionKeyParameterNames": {
                  "header": "Ocp-Apim-Subscription-Key",
                  "query": "subscription-key"
                },
                "isCurrent": true
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'apim-deployment')]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('managedAppStorageAccountName'))), not(empty(parameters('managedAppStorageAccountKey'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "graphrag-api-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "GraphRag"
          },
          "apiManagementName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'apim-deployment'), '2022-09-01').outputs.name.value]"
          },
          "backendUrl": {
            "value": "[variables('appUrl')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "774597234119036898"
            }
          },
          "parameters": {
            "apiManagementName": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "backendUrl": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": {
              "components": {
                "schemas": {
                  "BaseResponse": {
                    "properties": {
                      "status": {
                        "title": "Status",
                        "type": "string"
                      }
                    },
                    "required": [
                      "status"
                    ],
                    "title": "BaseResponse",
                    "type": "object"
                  },
                  "Body_schedule_index_job_index_post": {
                    "properties": {
                      "community_summarization_prompt": {
                        "anyOf": [
                          {
                            "format": "binary",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "title": "Community Summarization Prompt"
                      },
                      "entity_extraction_prompt": {
                        "anyOf": [
                          {
                            "format": "binary",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "title": "Entity Extraction Prompt"
                      },
                      "entity_summarization_prompt": {
                        "anyOf": [
                          {
                            "format": "binary",
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "title": "Entity Summarization Prompt"
                      }
                    },
                    "title": "Body_schedule_index_job_index_post",
                    "type": "object"
                  },
                  "Body_upload_files_data_post": {
                    "properties": {
                      "files": {
                        "items": {
                          "format": "binary",
                          "type": "string"
                        },
                        "title": "Files",
                        "type": "array"
                      }
                    },
                    "required": [
                      "files"
                    ],
                    "title": "Body_upload_files_data_post",
                    "type": "object"
                  },
                  "ClaimResponse": {
                    "properties": {
                      "covariate_type": {
                        "title": "Covariate Type",
                        "type": "string"
                      },
                      "description": {
                        "title": "Description",
                        "type": "string"
                      },
                      "document_ids": {
                        "items": {
                          "type": "string"
                        },
                        "title": "Document Ids",
                        "type": "array"
                      },
                      "object_id": {
                        "title": "Object Id",
                        "type": "string"
                      },
                      "source_text": {
                        "title": "Source Text",
                        "type": "string"
                      },
                      "subject_id": {
                        "title": "Subject Id",
                        "type": "string"
                      },
                      "text_unit_id": {
                        "title": "Text Unit Id",
                        "type": "string"
                      },
                      "type": {
                        "title": "Type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "covariate_type",
                      "type",
                      "description",
                      "subject_id",
                      "object_id",
                      "source_text",
                      "text_unit_id",
                      "document_ids"
                    ],
                    "title": "ClaimResponse",
                    "type": "object"
                  },
                  "EntityResponse": {
                    "properties": {
                      "description": {
                        "title": "Description",
                        "type": "string"
                      },
                      "name": {
                        "title": "Name",
                        "type": "string"
                      },
                      "text_units": {
                        "items": {
                          "type": "string"
                        },
                        "title": "Text Units",
                        "type": "array"
                      }
                    },
                    "required": [
                      "name",
                      "description",
                      "text_units"
                    ],
                    "title": "EntityResponse",
                    "type": "object"
                  },
                  "GraphRequest": {
                    "properties": {
                      "community_level": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "title": "Community Level"
                      },
                      "index_name": {
                        "title": "Index Name",
                        "type": "string"
                      },
                      "query": {
                        "title": "Query",
                        "type": "string"
                      }
                    },
                    "required": [
                      "index_name",
                      "query"
                    ],
                    "title": "GraphRequest",
                    "type": "object"
                  },
                  "GraphResponse": {
                    "properties": {
                      "context_data": {
                        "title": "Context Data"
                      },
                      "result": {
                        "title": "Result"
                      }
                    },
                    "required": [
                      "result",
                      "context_data"
                    ],
                    "title": "GraphResponse",
                    "type": "object"
                  },
                  "HTTPValidationError": {
                    "properties": {
                      "detail": {
                        "items": {
                          "$ref": "#/components/schemas/ValidationError"
                        },
                        "title": "Detail",
                        "type": "array"
                      }
                    },
                    "title": "HTTPValidationError",
                    "type": "object"
                  },
                  "IndexNameList": {
                    "properties": {
                      "index_name": {
                        "items": {
                          "type": "string"
                        },
                        "title": "Index Name",
                        "type": "array"
                      }
                    },
                    "required": [
                      "index_name"
                    ],
                    "title": "IndexNameList",
                    "type": "object"
                  },
                  "IndexStatusResponse": {
                    "properties": {
                      "index_name": {
                        "title": "Index Name",
                        "type": "string"
                      },
                      "percent_complete": {
                        "title": "Percent Complete",
                        "type": "number"
                      },
                      "progress": {
                        "title": "Progress",
                        "type": "string"
                      },
                      "status": {
                        "title": "Status",
                        "type": "string"
                      },
                      "status_code": {
                        "title": "Status Code",
                        "type": "integer"
                      },
                      "storage_name": {
                        "title": "Storage Name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "status_code",
                      "index_name",
                      "storage_name",
                      "status",
                      "percent_complete",
                      "progress"
                    ],
                    "title": "IndexStatusResponse",
                    "type": "object"
                  },
                  "RelationshipResponse": {
                    "properties": {
                      "description": {
                        "title": "Description",
                        "type": "string"
                      },
                      "source": {
                        "title": "Source",
                        "type": "string"
                      },
                      "source_id": {
                        "title": "Source Id",
                        "type": "integer"
                      },
                      "target": {
                        "title": "Target",
                        "type": "string"
                      },
                      "target_id": {
                        "title": "Target Id",
                        "type": "integer"
                      },
                      "text_units": {
                        "items": {
                          "type": "string"
                        },
                        "title": "Text Units",
                        "type": "array"
                      }
                    },
                    "required": [
                      "source",
                      "source_id",
                      "target",
                      "target_id",
                      "description",
                      "text_units"
                    ],
                    "title": "RelationshipResponse",
                    "type": "object"
                  },
                  "ReportResponse": {
                    "properties": {
                      "text": {
                        "title": "Text",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "title": "ReportResponse",
                    "type": "object"
                  },
                  "StorageNameList": {
                    "properties": {
                      "storage_name": {
                        "items": {
                          "type": "string"
                        },
                        "title": "Storage Name",
                        "type": "array"
                      }
                    },
                    "required": [
                      "storage_name"
                    ],
                    "title": "StorageNameList",
                    "type": "object"
                  },
                  "TextUnitResponse": {
                    "properties": {
                      "source_document": {
                        "title": "Source Document",
                        "type": "string"
                      },
                      "text": {
                        "title": "Text",
                        "type": "string"
                      }
                    },
                    "required": [
                      "text",
                      "source_document"
                    ],
                    "title": "TextUnitResponse",
                    "type": "object"
                  },
                  "ValidationError": {
                    "properties": {
                      "loc": {
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "title": "Location",
                        "type": "array"
                      },
                      "msg": {
                        "title": "Message",
                        "type": "string"
                      },
                      "type": {
                        "title": "Error Type",
                        "type": "string"
                      }
                    },
                    "required": [
                      "loc",
                      "msg",
                      "type"
                    ],
                    "title": "ValidationError",
                    "type": "object"
                  }
                }
              },
              "info": {
                "title": "GraphRAG",
                "version": "v0.0.0"
              },
              "openapi": "3.1.0",
              "paths": {
                "/data": {
                  "get": {
                    "description": "Retrieve a list of all data containers.",
                    "operationId": "get_all_data_containers_data_get",
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/StorageNameList"
                            }
                          }
                        },
                        "description": "Successful Response"
                      }
                    },
                    "summary": "Get list of data containers.",
                    "tags": [
                      "Data Management"
                    ]
                  },
                  "post": {
                    "description": "Create a Azure Storage container and upload files to it.\n\nArgs:\n    files (List[UploadFile]): A list of files to be uploaded.\n    storage_name (str): The name of the Azure Blob Storage container to which files will be uploaded.\n    overwrite (bool): Whether to overwrite existing files with the same name. Defaults to True. If False, files that already exist will be skipped.\n\nReturns:\n    BaseResponse: An instance of the BaseResponse model with a status message indicating the result of the upload.\n\nRaises:\n    HTTPException: If the container name is invalid or if any error occurs during the upload process.",
                    "operationId": "upload_files_data_post",
                    "parameters": [
                      {
                        "in": "query",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      },
                      {
                        "in": "query",
                        "name": "overwrite",
                        "required": false,
                        "schema": {
                          "default": true,
                          "title": "Overwrite",
                          "type": "boolean"
                        }
                      }
                    ],
                    "requestBody": {
                      "content": {
                        "multipart/form-data": {
                          "schema": {
                            "$ref": "#/components/schemas/Body_upload_files_data_post"
                          }
                        }
                      },
                      "required": true
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/BaseResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Upload data to a data storage container",
                    "tags": [
                      "Data Management"
                    ]
                  }
                },
                "/data/{container_name}": {
                  "delete": {
                    "description": "Delete a specified data storage container.",
                    "operationId": "delete_files_data__container_name__delete",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/BaseResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Delete a data storage container",
                    "tags": [
                      "Data Management"
                    ]
                  }
                },
                "/graph/graphml/{container_name}": {
                  "get": {
                    "operationId": "get_graphml_file_graph_graphml__container_name__get",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {}
                          }
                        },
                        "description": "GraphML file successfully downloaded"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Retrieve a GraphML file of the knowledge graph",
                    "tags": [
                      "Graph Operations"
                    ]
                  }
                },
                "/health": {
                  "get": {
                    "description": "Returns a 200 response to indicate the API is healthy.",
                    "operationId": "health_check_health_get",
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {}
                          }
                        },
                        "description": "Successful Response"
                      }
                    },
                    "summary": "API health check"
                  }
                },
                "/index": {
                  "get": {
                    "description": "Retrieve a list of all index names.",
                    "operationId": "get_all_index_names_index_get",
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/IndexNameList"
                            }
                          }
                        },
                        "description": "Successful Response"
                      }
                    },
                    "summary": "Get all index names",
                    "tags": [
                      "Index Operations"
                    ]
                  },
                  "post": {
                    "operationId": "schedule_index_job_index_post",
                    "parameters": [
                      {
                        "in": "query",
                        "name": "storage_container_name",
                        "required": true,
                        "schema": {
                          "title": "Storage Container Name",
                          "type": "string"
                        }
                      },
                      {
                        "in": "query",
                        "name": "index_container_name",
                        "required": true,
                        "schema": {
                          "title": "Index Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "requestBody": {
                      "content": {
                        "multipart/form-data": {
                          "schema": {
                            "$ref": "#/components/schemas/Body_schedule_index_job_index_post"
                          }
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/BaseResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Build an index",
                    "tags": [
                      "Index Operations"
                    ]
                  }
                },
                "/index/config/prompts": {
                  "get": {
                    "description": "Generating custom prompts from user-provided data may take several minutes to run based on the amount of data used.",
                    "operationId": "generate_prompts_index_config_prompts_get",
                    "parameters": [
                      {
                        "in": "query",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      },
                      {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                          "default": 5,
                          "title": "Limit",
                          "type": "integer"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {}
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Generate custom graphrag prompts based on user-provided data.",
                    "tags": [
                      "Prompt Tuning"
                    ]
                  }
                },
                "/index/status/{container_name}": {
                  "get": {
                    "operationId": "get_index_status_index_status__container_name__get",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/IndexStatusResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Track the status of an indexing job",
                    "tags": [
                      "Index Operations"
                    ]
                  }
                },
                "/index/{container_name}": {
                  "delete": {
                    "description": "Delete a specified index and all associated metadata.",
                    "operationId": "delete_index_index__container_name__delete",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/BaseResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Delete a specified index",
                    "tags": [
                      "Index Operations"
                    ]
                  }
                },
                "/query/global": {
                  "post": {
                    "description": "The global query method generates answers by searching over all AI-generated community reports in a map-reduce fashion. This is a resource-intensive method, but often gives good responses for questions that require an understanding of the dataset as a whole.",
                    "operationId": "global_query_query_global_post",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/GraphRequest"
                          }
                        }
                      },
                      "required": true
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/GraphResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Perform a global search across the knowledge graph index",
                    "tags": [
                      "Query Operations"
                    ]
                  }
                },
                "/query/local": {
                  "post": {
                    "description": "The local query method generates answers by combining relevant data from the AI-extracted knowledge-graph with text chunks of the raw documents. This method is suitable for questions that require an understanding of specific entities mentioned in the documents (e.g. What are the healing properties of chamomile?).",
                    "operationId": "local_query_query_local_post",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/GraphRequest"
                          }
                        }
                      },
                      "required": true
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/GraphResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Perform a local search across the knowledge graph index.",
                    "tags": [
                      "Query Operations"
                    ]
                  }
                },
                "/source/claim/{container_name}/{claim_id}": {
                  "get": {
                    "operationId": "get_claim_info_source_claim__container_name___claim_id__get",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "claim_id",
                        "required": true,
                        "schema": {
                          "title": "Claim Id",
                          "type": "integer"
                        }
                      },
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/ClaimResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Return a single claim.",
                    "tags": [
                      "Sources"
                    ]
                  }
                },
                "/source/entity/{container_name}/{entity_id}": {
                  "get": {
                    "operationId": "get_entity_info_source_entity__container_name___entity_id__get",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "entity_id",
                        "required": true,
                        "schema": {
                          "title": "Entity Id",
                          "type": "integer"
                        }
                      },
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/EntityResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Return a single entity.",
                    "tags": [
                      "Sources"
                    ]
                  }
                },
                "/source/relationship/{container_name}/{relationship_id}": {
                  "get": {
                    "operationId": "get_relationship_info_source_relationship__container_name___relationship_id__get",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "relationship_id",
                        "required": true,
                        "schema": {
                          "title": "Relationship Id",
                          "type": "integer"
                        }
                      },
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/RelationshipResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Return a single relationship.",
                    "tags": [
                      "Sources"
                    ]
                  }
                },
                "/source/report/{container_name}/{report_id}": {
                  "get": {
                    "operationId": "get_report_info_source_report__container_name___report_id__get",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "report_id",
                        "required": true,
                        "schema": {
                          "title": "Report Id",
                          "type": "integer"
                        }
                      },
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/ReportResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Return a single community report.",
                    "tags": [
                      "Sources"
                    ]
                  }
                },
                "/source/text/{container_name}/{text_unit_id}": {
                  "get": {
                    "operationId": "get_chunk_info_source_text__container_name___text_unit_id__get",
                    "parameters": [
                      {
                        "in": "path",
                        "name": "text_unit_id",
                        "required": true,
                        "schema": {
                          "title": "Text Unit Id",
                          "type": "string"
                        }
                      },
                      {
                        "in": "path",
                        "name": "container_name",
                        "required": true,
                        "schema": {
                          "title": "Container Name",
                          "type": "string"
                        }
                      }
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/TextUnitResponse"
                            }
                          }
                        },
                        "description": "Successful Response"
                      },
                      "422": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/HTTPValidationError"
                            }
                          }
                        },
                        "description": "Validation Error"
                      }
                    },
                    "summary": "Return a single base text unit.",
                    "tags": [
                      "Sources"
                    ]
                  }
                }
              }
            },
            "$fxv#1": "<policies>\n\t<inbound>\n\t\t<base />\n\t\t<cors allow-credentials=\"false\">\n\t\t\t<allowed-origins>\n\t\t\t\t<origin>*</origin>\n\t\t\t</allowed-origins>\n\t\t\t<allowed-methods>\n\t\t\t\t<method>*</method>\n\t\t\t</allowed-methods>\n\t\t\t<allowed-headers>\n\t\t\t\t<header>*</header>\n\t\t\t</allowed-headers>\n\t\t\t<expose-headers>\n\t\t\t\t<header>*</header>\n\t\t\t</expose-headers>\n\t\t</cors>\n\t</inbound>\n\t<backend>\n\t\t<forward-request buffer-response=\"false\" />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>"
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service/apis/policies",
              "apiVersion": "2022-08-01",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('apiManagementName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('apiManagementName'), parameters('name')), '/')[1], 'policy')]",
              "properties": {
                "format": "rawxml",
                "value": "[variables('$fxv#1')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', split(format('{0}/{1}', parameters('apiManagementName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('apiManagementName'), parameters('name')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2023-09-01-preview",
              "name": "[format('{0}/{1}', parameters('apiManagementName'), parameters('name'))]",
              "properties": {
                "displayName": "GraphRAG",
                "apiRevision": "1",
                "subscriptionRequired": true,
                "serviceUrl": "[parameters('backendUrl')]",
                "path": "",
                "protocols": [
                  "https"
                ],
                "authenticationSettings": {
                  "oAuth2AuthenticationSettings": [],
                  "openidAuthenticationSettings": []
                },
                "subscriptionKeyParameterNames": {
                  "header": "Ocp-Apim-Subscription-Key",
                  "query": "subscription-key"
                },
                "isCurrent": true,
                "format": "openapi+json",
                "value": "[string(variables('$fxv#0'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'apim-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "workload-identity-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('workloadIdentityName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "federatedCredentials": {
            "value": {
              "aks-workload-identity": {
                "issuer": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-deployment'), '2022-09-01').outputs.issuer.value]",
                "audiences": [
                  "api://AzureADTokenExchange"
                ],
                "subject": "[variables('workloadIdentitySubject')]"
              }
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "10328388848308358179"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the identity"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the identity"
              }
            },
            "federatedCredentials": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "federated name: FederatedIdentityCredentialProperties.  See https://learn.microsoft.com/en-us/azure/templates/microsoft.managedidentity/userassignedidentities/federatedidentitycredentials?pivots=deployment-language-bicep#federatedidentitycredentialproperties"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]"
            },
            {
              "copy": {
                "name": "federatedCredentialResources",
                "count": "[length(items(parameters('federatedCredentials')))]"
              },
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}/{1}', parameters('name'), items(parameters('federatedCredentials'))[copyIndex()].key)]",
              "properties": "[items(parameters('federatedCredentials'))[copyIndex()].value]",
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            },
            "clientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').clientId]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'aks-deployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "private-dns-zone-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('dnsDomain')]"
          },
          "vnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "7081181184999422075"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private DNS zone."
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the virtual networks the DNS zone should be associated with."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2024-06-01",
              "name": "[parameters('name')]",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('vnetName'))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "privatelink-private-dns-zones-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "linkedVnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "13460578716032017965"
            }
          },
          "parameters": {
            "linkedVnetId": {
              "type": "string",
              "metadata": {
                "description": "The virtual network ID to link to"
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "azureCloud": {
                "aiSearch": "privatelink.search.windows.net",
                "azureMonitor": [
                  "privatelink.monitor.azure.com",
                  "privatelink.oms.opinsights.azure.com",
                  "privatelink.agentsvc.azure-automation.net",
                  "privatelink.ods.opinsights.azure.com"
                ],
                "blobStorage": "privatelink.blob.core.windows.net",
                "cosmosDB": "privatelink.documents.azure.com"
              },
              "azureusgovernment": {
                "aiSearch": "privatelink.search.azure.us",
                "azureMonitor": [
                  "privatelink.monitor.azure.us",
                  "privatelink.oms.opinsights.azure.us",
                  "privatelink.agentsvc.azure-automation.us",
                  "privatelink.ods.opinsights.azure.us"
                ],
                "blobStorage": "privatelink.blob.core.usgovcloudapi.net",
                "cosmosDB": "privatelink.documents.azure.us"
              }
            },
            "privateDnsZoneData": "[variables('$fxv#0')]",
            "cloudName": "[toLower(environment().name)]",
            "aiSearchPrivateDnsZoneName": "[variables('privateDnsZoneData')[variables('cloudName')].aiSearch]",
            "blobStoragePrivateDnsZoneName": "[variables('privateDnsZoneData')[variables('cloudName')].blobStorage]",
            "cosmosDbPrivateDnsZoneName": "[variables('privateDnsZoneData')[variables('cloudName')].cosmosDb]",
            "storagePrivateDnsZoneNames": [
              "[variables('blobStoragePrivateDnsZoneName')]"
            ],
            "azureMonitorPrivateDnsZones": "[variables('privateDnsZoneData')[variables('cloudName')].azureMonitor]",
            "privateDnsZones": "[union(variables('azureMonitorPrivateDnsZones'), variables('storagePrivateDnsZoneNames'), createArray(variables('cosmosDbPrivateDnsZoneName')), createArray(variables('aiSearchPrivateDnsZoneName')))]"
          },
          "resources": [
            {
              "copy": {
                "name": "privateDnsZoneResources",
                "count": "[length(variables('privateDnsZones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2024-06-01",
              "name": "[variables('privateDnsZones')[copyIndex()]]",
              "location": "global"
            },
            {
              "copy": {
                "name": "dnsVnetLinks",
                "count": "[length(variables('privateDnsZones'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[replace(variables('privateDnsZones')[copyIndex()], '.', '-')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[variables('privateDnsZones')[copyIndex()]]"
                  },
                  "vnetId": {
                    "value": "[parameters('linkedVnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10417721594575908004"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string"
                    },
                    "vnetId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-{1}', replace(parameters('privateDnsZoneName'), '.', '-'), uniqueString(parameters('vnetId'))))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "resolutionPolicy": "Default",
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones')[copyIndex()])]"
              ]
            }
          ],
          "outputs": {
            "azureMonitorPrivateDnsZoneConfigs": {
              "type": "array",
              "copy": {
                "count": "[length(union(variables('azureMonitorPrivateDnsZones'), createArray(variables('blobStoragePrivateDnsZoneName'))))]",
                "input": {
                  "name": "[variables('privateDnsZones')[indexOf(variables('privateDnsZones'), union(variables('azureMonitorPrivateDnsZones'), createArray(variables('blobStoragePrivateDnsZoneName')))[copyIndex()])]]",
                  "properties": {
                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones')[indexOf(variables('privateDnsZones'), union(variables('azureMonitorPrivateDnsZones'), createArray(variables('blobStoragePrivateDnsZoneName')))[copyIndex()])])]"
                  }
                }
              }
            },
            "blobStoragePrivateDnsZoneConfigs": {
              "type": "array",
              "value": [
                {
                  "name": "[variables('blobStoragePrivateDnsZoneName')]",
                  "properties": {
                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones')[indexOf(variables('privateDnsZones'), variables('blobStoragePrivateDnsZoneName'))])]"
                  }
                }
              ]
            },
            "cosmosDbPrivateDnsZoneConfigs": {
              "type": "array",
              "value": [
                {
                  "name": "[variables('privateDnsZones')[indexOf(variables('privateDnsZones'), variables('cosmosDbPrivateDnsZoneName'))]]",
                  "properties": {
                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones')[indexOf(variables('privateDnsZones'), variables('cosmosDbPrivateDnsZoneName'))])]"
                  }
                }
              ]
            },
            "aiSearchPrivateDnsZoneConfigs": {
              "type": "array",
              "value": [
                {
                  "name": "[variables('privateDnsZones')[indexOf(variables('privateDnsZones'), variables('aiSearchPrivateDnsZoneName'))]]",
                  "properties": {
                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones')[indexOf(variables('privateDnsZones'), variables('aiSearchPrivateDnsZoneName'))])]"
                  }
                }
              ]
            },
            "privateDnsZones": {
              "type": "array",
              "value": "[variables('privateDnsZones')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "azure-monitor-privatelink-scope-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateLinkScopeName": {
            "value": "[format('{0}{1}', variables('abbrs').networkPrivateLinkScope, variables('resourceBaseNameFinal'))]"
          },
          "privateLinkScopedResources": {
            "value": [
              "[reference(resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment'), '2022-09-01').outputs.id.value]",
              "[reference(resourceId('Microsoft.Resources/deployments', 'app-insights-deployment'), '2022-09-01').outputs.id.value]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "5085079052279481938"
            }
          },
          "parameters": {
            "privateLinkScopeName": {
              "type": "string"
            },
            "privateLinkScopedResources": {
              "type": "array",
              "defaultValue": []
            },
            "queryAccessMode": {
              "type": "string",
              "defaultValue": "Open"
            },
            "ingestionAccessMode": {
              "type": "string",
              "defaultValue": "PrivateOnly"
            }
          },
          "resources": [
            {
              "type": "microsoft.insights/privateLinkScopes",
              "apiVersion": "2021-07-01-preview",
              "name": "[parameters('privateLinkScopeName')]",
              "location": "global",
              "properties": {
                "accessModeSettings": {
                  "queryAccessMode": "[parameters('queryAccessMode')]",
                  "ingestionAccessMode": "[parameters('ingestionAccessMode')]"
                }
              }
            },
            {
              "copy": {
                "name": "scopedResources",
                "count": "[length(parameters('privateLinkScopedResources'))]"
              },
              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
              "apiVersion": "2021-07-01-preview",
              "name": "[format('{0}/{1}', parameters('privateLinkScopeName'), uniqueString(parameters('privateLinkScopedResources')[copyIndex()]))]",
              "properties": {
                "linkedResourceId": "[parameters('privateLinkScopedResources')[copyIndex()]]"
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/privateLinkScopes', parameters('privateLinkScopeName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('privateLinkScopeName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('microsoft.insights/privateLinkScopes', parameters('privateLinkScopeName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'app-insights-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'log-analytics-deployment')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosDb-private-endpoint-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointName": {
            "value": "[format('{0}cosmos-{1}', variables('abbrs').privateEndpoint, reference(resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment'), '2022-09-01').outputs.name.value)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "privateLinkServiceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment'), '2022-09-01').outputs.id.value]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.aksSubnetId.value]"
          },
          "groupId": {
            "value": "Sql"
          },
          "privateDnsZoneConfigs": "[if(parameters('enablePrivateEndpoints'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment'), '2022-09-01').outputs.cosmosDbPrivateDnsZoneConfigs.value), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "7957361984829939297"
            }
          },
          "parameters": {
            "privateLinkServiceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of service the private endpoint is for"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the subnet to deploy the private endpoint to"
              }
            },
            "privateDnsZoneConfigs": {
              "type": "array",
              "metadata": {
                "description": "Map of group id to array of private dns zone configs to associate with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetId')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('groupId'))]",
              "properties": {
                "privateDnsZoneConfigs": "[parameters('privateDnsZoneConfigs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "blob-storage-private-endpoint-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointName": {
            "value": "[format('{0}blob-{1}', variables('abbrs').privateEndpoint, reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment'), '2022-09-01').outputs.name.value)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "privateLinkServiceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment'), '2022-09-01').outputs.id.value]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.aksSubnetId.value]"
          },
          "groupId": {
            "value": "blob"
          },
          "privateDnsZoneConfigs": "[if(parameters('enablePrivateEndpoints'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment'), '2022-09-01').outputs.blobStoragePrivateDnsZoneConfigs.value), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "7957361984829939297"
            }
          },
          "parameters": {
            "privateLinkServiceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of service the private endpoint is for"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the subnet to deploy the private endpoint to"
              }
            },
            "privateDnsZoneConfigs": {
              "type": "array",
              "metadata": {
                "description": "Map of group id to array of private dns zone configs to associate with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetId')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('groupId'))]",
              "properties": {
                "privateDnsZoneConfigs": "[parameters('privateDnsZoneConfigs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ai-search-private-endpoint-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointName": {
            "value": "[format('{0}search-{1}', variables('abbrs').privateEndpoint, reference(resourceId('Microsoft.Resources/deployments', 'aisearch-deployment'), '2022-09-01').outputs.name.value)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "privateLinkServiceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aisearch-deployment'), '2022-09-01').outputs.id.value]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.aksSubnetId.value]"
          },
          "groupId": {
            "value": "searchService"
          },
          "privateDnsZoneConfigs": "[if(parameters('enablePrivateEndpoints'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment'), '2022-09-01').outputs.aiSearchPrivateDnsZoneConfigs.value), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "7957361984829939297"
            }
          },
          "parameters": {
            "privateLinkServiceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of service the private endpoint is for"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the subnet to deploy the private endpoint to"
              }
            },
            "privateDnsZoneConfigs": {
              "type": "array",
              "metadata": {
                "description": "Map of group id to array of private dns zone configs to associate with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetId')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('groupId'))]",
              "properties": {
                "privateDnsZoneConfigs": "[parameters('privateDnsZoneConfigs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'aisearch-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
      ]
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "privatelink-scope-private-endpoint-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointName": {
            "value": "[format('{0}pls-{1}', variables('abbrs').privateEndpoint, variables('resourceBaseNameFinal'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "privateLinkServiceId": "[if(parameters('enablePrivateEndpoints'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'azure-monitor-privatelink-scope-deployment'), '2022-09-01').outputs.id.value), createObject('value', ''))]",
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.aksSubnetId.value]"
          },
          "groupId": {
            "value": "azuremonitor"
          },
          "privateDnsZoneConfigs": "[if(parameters('enablePrivateEndpoints'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment'), '2022-09-01').outputs.azureMonitorPrivateDnsZoneConfigs.value), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "7957361984829939297"
            }
          },
          "parameters": {
            "privateLinkServiceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of service the private endpoint is for"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the subnet to deploy the private endpoint to"
              }
            },
            "privateDnsZoneConfigs": {
              "type": "array",
              "metadata": {
                "description": "Map of group id to array of private dns zone configs to associate with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetId')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('groupId'))]",
              "properties": {
                "privateDnsZoneConfigs": "[parameters('privateDnsZoneConfigs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'azure-monitor-privatelink-scope-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet-deployment')]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('managedAppStorageAccountName'))), not(empty(parameters('managedAppStorageAccountKey'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deployScript-deployment-{0}', parameters('utcString'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "script_file": {
            "value": "[variables('$fxv#1')]"
          },
          "public_storage_account_name": {
            "value": "[parameters('managedAppStorageAccountName')]"
          },
          "public_storage_account_key": {
            "value": "[parameters('managedAppStorageAccountKey')]"
          },
          "acr_login_server": {
            "value": "[parameters('existingAcrLoginServer')]"
          },
          "acr_token_name": {
            "value": "[parameters('acrTokenName')]"
          },
          "acr_token_password": {
            "value": "[parameters('acrTokenPassword')]"
          },
          "ai_search_name": {
            "value": "aisearch-deployment"
          },
          "aks_name": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-deployment'), '2022-09-01').outputs.name.value]"
          },
          "aks_service_account_name": {
            "value": "[variables('aksServiceAccountName')]"
          },
          "deployAoai": {
            "value": "[parameters('deployAoai')]"
          },
          "aoai_endpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-workload-identity-rbac-assignments'), '2022-09-01').outputs.aoaiEndpoint.value]"
          },
          "aoai_llm_model": "[if(parameters('deployAoai'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.llmModel.value), createObject('value', parameters('llmModelName')))]",
          "aoai_llm_model_deployment_name": "[if(parameters('deployAoai'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.llmModelDeploymentName.value), createObject('value', parameters('llmModelDeploymentName')))]",
          "aoai_llm_model_version": "[if(parameters('deployAoai'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.llmModelVersion.value), createObject('value', parameters('llmModelVersion')))]",
          "aoai_embedding_model": "[if(parameters('deployAoai'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.embeddingModel.value), createObject('value', parameters('embeddingModelName')))]",
          "aoai_embedding_model_deployment_name": "[if(parameters('deployAoai'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.embeddingModelDeploymentName.value), createObject('value', parameters('embeddingModelDeploymentName')))]",
          "app_hostname": {
            "value": "[variables('appHostname')]"
          },
          "app_insights_connection_string": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-insights-deployment'), '2022-09-01').outputs.connectionString.value]"
          },
          "cosmosdb_endpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment'), '2022-09-01').outputs.endpoint.value]"
          },
          "image_name": {
            "value": "[parameters('graphragImageName')]"
          },
          "image_version": {
            "value": "[parameters('graphragImageVersion')]"
          },
          "storage_account_blob_url": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment'), '2022-09-01').outputs.primaryEndpoints.value.blob]"
          },
          "utcValue": {
            "value": "[parameters('utcString')]"
          },
          "workload_identity_client_id": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'workload-identity-deployment'), '2022-09-01').outputs.clientId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "6981701300266470883"
            }
          },
          "parameters": {
            "utcValue": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "acr_login_server": {
              "type": "string"
            },
            "acr_token_name": {
              "type": "string"
            },
            "acr_token_password": {
              "type": "securestring"
            },
            "ai_search_audience": {
              "type": "string",
              "defaultValue": "https://search.azure.com"
            },
            "ai_search_name": {
              "type": "string"
            },
            "ai_search_endpoint_suffix": {
              "type": "string",
              "defaultValue": "search.windows.net"
            },
            "aks_name": {
              "type": "string"
            },
            "aks_service_account_name": {
              "type": "string"
            },
            "deployAoai": {
              "type": "bool"
            },
            "aoai_endpoint": {
              "type": "string"
            },
            "aoai_llm_model": {
              "type": "string"
            },
            "aoai_llm_model_deployment_name": {
              "type": "string"
            },
            "aoai_llm_model_version": {
              "type": "string"
            },
            "aoai_embedding_model": {
              "type": "string"
            },
            "aoai_embedding_model_deployment_name": {
              "type": "string"
            },
            "app_hostname": {
              "type": "string"
            },
            "app_insights_connection_string": {
              "type": "string"
            },
            "cosmosdb_endpoint": {
              "type": "string"
            },
            "image_name": {
              "type": "string"
            },
            "image_version": {
              "type": "string"
            },
            "script_file": {
              "type": "string"
            },
            "storage_account_blob_url": {
              "type": "string"
            },
            "workload_identity_client_id": {
              "type": "string"
            },
            "cognitive_services_audience": {
              "type": "string",
              "defaultValue": "https://cognitiveservices.azure.com/default"
            },
            "public_storage_account_name": {
              "type": "string"
            },
            "public_storage_account_key": {
              "type": "securestring"
            }
          },
          "variables": {
            "clusterAdminRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8')]",
            "rbacClusterAdminRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b')]",
            "aksContributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8')]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('deployment-script-identity-{0}', uniqueString(resourceGroup().id))]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('aks_name'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id))), resourceId('Microsoft.ContainerService/managedClusters', parameters('aks_name')), variables('clusterAdminRoleDefinitionId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id))), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('clusterAdminRoleDefinitionId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id)))]"
              ],
              "metadata": {
                "description": "Assign AKS Cluster Admin role to the deployment script identity to access AKS."
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('aks_name'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id))), resourceId('Microsoft.ContainerService/managedClusters', parameters('aks_name')), variables('rbacClusterAdminRoleDefinitionId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id))), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('rbacClusterAdminRoleDefinitionId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id)))]"
              ],
              "metadata": {
                "description": "Assign AKS RBAC Cluster Admin role to the deployment script identity to access AKS."
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('aks_name'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id))), resourceId('Microsoft.ContainerService/managedClusters', parameters('aks_name')), variables('aksContributorRoleDefinitionId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id))), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('aksContributorRoleDefinitionId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id)))]"
              ],
              "metadata": {
                "description": "Assign AKS Contributor role to the deployment script identity to access AKS."
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "deployment-script-deployment",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id))))]": {}
                }
              },
              "properties": {
                "storageAccountSettings": {
                  "storageAccountName": "[parameters('public_storage_account_name')]",
                  "storageAccountKey": "[parameters('public_storage_account_key')]"
                },
                "forceUpdateTag": "[parameters('utcValue')]",
                "azCliVersion": "2.7.0",
                "timeout": "PT1H",
                "environmentVariables": [
                  {
                    "name": "ACR_SERVER",
                    "value": "[parameters('acr_login_server')]"
                  },
                  {
                    "name": "ACR_TOKEN_NAME",
                    "value": "[parameters('acr_token_name')]"
                  },
                  {
                    "name": "ACR_TOKEN_PASSWORD",
                    "value": "[parameters('acr_token_password')]"
                  },
                  {
                    "name": "AI_SEARCH_AUDIENCE",
                    "value": "[parameters('ai_search_audience')]"
                  },
                  {
                    "name": "AI_SEARCH_ENDPOINT_SUFFIX",
                    "value": "[parameters('ai_search_endpoint_suffix')]"
                  },
                  {
                    "name": "AI_SEARCH_NAME",
                    "value": "[parameters('ai_search_name')]"
                  },
                  {
                    "name": "AKS_NAME",
                    "value": "[parameters('aks_name')]"
                  },
                  {
                    "name": "AKS_SERVICE_ACCOUNT_NAME",
                    "value": "[parameters('aks_service_account_name')]"
                  },
                  {
                    "name": "DEPLOY_AOAI",
                    "value": "[string(parameters('deployAoai'))]"
                  },
                  {
                    "name": "AOAI_ENDPOINT",
                    "value": "[parameters('aoai_endpoint')]"
                  },
                  {
                    "name": "AOAI_LLM_MODEL",
                    "value": "[parameters('aoai_llm_model')]"
                  },
                  {
                    "name": "AOAI_LLM_MODEL_DEPLOYMENT_NAME",
                    "value": "[parameters('aoai_llm_model_deployment_name')]"
                  },
                  {
                    "name": "AOAI_LLM_MODEL_API_VERSION",
                    "value": "[parameters('aoai_llm_model_version')]"
                  },
                  {
                    "name": "AOAI_EMBEDDING_MODEL",
                    "value": "[parameters('aoai_embedding_model')]"
                  },
                  {
                    "name": "AOAI_EMBEDDING_MODEL_DEPLOYMENT_NAME",
                    "value": "[parameters('aoai_embedding_model_deployment_name')]"
                  },
                  {
                    "name": "APP_HOSTNAME",
                    "value": "[parameters('app_hostname')]"
                  },
                  {
                    "name": "APP_INSIGHTS_CONNECTION_STRING",
                    "value": "[parameters('app_insights_connection_string')]"
                  },
                  {
                    "name": "COGNITIVE_SERVICES_AUDIENCE",
                    "value": "[parameters('cognitive_services_audience')]"
                  },
                  {
                    "name": "COSMOSDB_ENDPOINT",
                    "value": "[parameters('cosmosdb_endpoint')]"
                  },
                  {
                    "name": "IMAGE_NAME",
                    "value": "[parameters('image_name')]"
                  },
                  {
                    "name": "IMAGE_VERSION",
                    "value": "[parameters('image_version')]"
                  },
                  {
                    "name": "RESOURCE_GROUP",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "STORAGE_ACCOUNT_BLOB_URL",
                    "value": "[parameters('storage_account_blob_url')]"
                  },
                  {
                    "name": "WORKLOAD_IDENTITY_CLIENT_ID",
                    "value": "[parameters('workload_identity_client_id')]"
                  }
                ],
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "scriptContent": "[parameters('script_file')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('deployment-script-identity-{0}', uniqueString(resourceGroup().id)))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'aisearch-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'aks-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'aks-workload-identity-rbac-assignments')]",
        "[resourceId('Microsoft.Resources/deployments', 'aoai-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'app-insights-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'workload-identity-deployment')]"
      ]
    }
  ],
  "outputs": {
    "deployer_principal_id": {
      "type": "string",
      "value": "[deployer().objectId]"
    },
    "azure_location": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "azure_tenant_id": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "azure_ai_search_name": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aisearch-deployment'), '2022-09-01').outputs.name.value]"
    },
    "azure_acr_login_server": {
      "type": "string",
      "value": "[if(parameters('deployAcr'), reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2022-09-01').outputs.loginServer.value, parameters('existingAcrLoginServer'))]"
    },
    "azure_acr_name": {
      "type": "string",
      "value": "[if(parameters('deployAcr'), reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2022-09-01').outputs.name.value, '')]"
    },
    "azure_aks_name": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-deployment'), '2022-09-01').outputs.name.value]"
    },
    "azure_aks_controlplanefqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-deployment'), '2022-09-01').outputs.controlPlaneFqdn.value]"
    },
    "azure_aks_managed_rg": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'aks-deployment'), '2022-09-01').outputs.managedResourceGroup.value]"
    },
    "azure_aks_service_account_name": {
      "type": "string",
      "value": "[variables('aksServiceAccountName')]"
    },
    "azure_aoai_endpoint": {
      "type": "string",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.endpoint.value, reference(resourceId('Microsoft.Resources/deployments', 'aks-workload-identity-rbac-assignments'), '2022-09-01').outputs.aoaiEndpoint.value)]"
    },
    "azure_aoai_llm_model": {
      "type": "string",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.llmModel.value, parameters('llmModelName'))]"
    },
    "azure_aoai_llm_model_deployment_name": {
      "type": "string",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.llmModelDeploymentName.value, parameters('llmModelDeploymentName'))]"
    },
    "azure_aoai_llm_model_quota": {
      "type": "int",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.llmModelQuota.value, 0)]"
    },
    "azure_aoai_llm_model_api_version": {
      "type": "string",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.llmModelVersion.value, parameters('llmModelVersion'))]"
    },
    "azure_aoai_embedding_model": {
      "type": "string",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.embeddingModel.value, parameters('embeddingModelName'))]"
    },
    "azure_aoai_embedding_model_deployment_name": {
      "type": "string",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.embeddingModelDeploymentName.value, parameters('embeddingModelDeploymentName'))]"
    },
    "azure_aoai_embedding_model_quota": {
      "type": "int",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.embeddingModelQuota.value, 0)]"
    },
    "azure_aoai_embedding_model_api_version": {
      "type": "string",
      "value": "[if(parameters('deployAoai'), reference(resourceId('Microsoft.Resources/deployments', 'aoai-deployment'), '2022-09-01').outputs.embeddingModelVersion.value, parameters('embeddingModelVersion'))]"
    },
    "azure_apim_gateway_url": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'apim-deployment'), '2022-09-01').outputs.apimGatewayUrl.value]"
    },
    "azure_apim_name": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'apim-deployment'), '2022-09-01').outputs.name.value]"
    },
    "azure_app_hostname": {
      "type": "string",
      "value": "[variables('appHostname')]"
    },
    "azure_app_url": {
      "type": "string",
      "value": "[variables('appUrl')]"
    },
    "azure_app_insights_connection_string": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-insights-deployment'), '2022-09-01').outputs.connectionString.value]"
    },
    "azure_cosmosdb_endpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment'), '2022-09-01').outputs.endpoint.value]"
    },
    "azure_cosmosdb_name": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment'), '2022-09-01').outputs.name.value]"
    },
    "azure_cosmosdb_id": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmosdb-deployment'), '2022-09-01').outputs.id.value]"
    },
    "azure_dns_zone_name": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'private-dns-zone-deployment'), '2022-09-01').outputs.name.value]"
    },
    "azure_private_dns_zones": {
      "type": "array",
      "value": "[if(parameters('enablePrivateEndpoints'), union(reference(resourceId('Microsoft.Resources/deployments', 'privatelink-private-dns-zones-deployment'), '2022-09-01').outputs.privateDnsZones.value, createArray(reference(resourceId('Microsoft.Resources/deployments', 'private-dns-zone-deployment'), '2022-09-01').outputs.name.value)), createArray())]"
    },
    "azure_storage_account": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment'), '2022-09-01').outputs.name.value]"
    },
    "azure_storage_account_blob_url": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment'), '2022-09-01').outputs.primaryEndpoints.value.blob]"
    },
    "azure_workload_identity_client_id": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'workload-identity-deployment'), '2022-09-01').outputs.clientId.value]"
    },
    "azure_workload_identity_principal_id": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'workload-identity-deployment'), '2022-09-01').outputs.principalId.value]"
    },
    "azure_workload_identity_name": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'workload-identity-deployment'), '2022-09-01').outputs.name.value]"
    }
  }
}